clear
clc
2+2
2+2
library(Amelia)
library(ggplot2)
library(caret)
library(reshape)
library(randomForest)
library(dplyr)
library(e1071)
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
summary(dados_clientes)
setwd("D:/Cursos/DataScienceAcademy/Projetos/PowerBI/ML")
dados_clientes <- read.csv("dados/dataset.csv")
library(Amelia)
library(ggplot2)
library(caret)
library(reshape)
library(randomForest)
library(dplyr)
library(e1071)
summary(dados_clientes)
#Removendo a primeira coluna ID
dados_clientes$ID <- NULL
dim(dados_clientes)
View(dados_clientes)
#Renomeando a coluna de classe
colnames(dados_clientes)
colnames(dados_clientes)[24] <- "inadimplente"
colnames(dados_clientes)
View(dados_clientes)
#Verificando valores ausentes e removendo do dataset
sapply(dados_clientes, function(x) sum(is.na(x)))
?missmap
missmap(dados_clientes, main = "Valores missing Observados")
dados_clientes <- na.omit(dados_clientes)
#Convertendo os atributos genero, escolaridade, estado civil, para fatores (categorias)
#Renomeando colunas categóricas
colnames(dados_clientes)
colnames(dados_clientes)[2] <- "Genero"
colnames(dados_clientes)[3] <- "Escolaridade"
colnames(dados_clientes)[4] <- "Estado_Civil"
colnames(dados_clientes)[5] <- "Idade"
colnames(dados_clientes)
View(dados_clientes)
#Genero
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
?cut
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
labels = c("Masculino", "Feminino"))
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
#Escolaridade
View(dados_clientes$Escolaridade)
str(dados_clientes$Escolaridade)
summary(dados_clientes$Escolaridade)
?cut
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
View(dados_clientes$Escolaridade)
str(dados_clientes$Escolaridade)
summary(dados_clientes$Escolaridade)
#Estado Civil
View(dados_clientes$Estado_Civil)
str(dados_clientes$Estado_Civil)
summary(dados_clientes$Estado_Civil)
?cut
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido",
"Casado",
"Solteiro",
"Outro"))
View(dados_clientes$Estado_Civil)
str(dados_clientes$Estado_Civil)
summary(dados_clientes$Estado_Civil)
#Convertendo a variável para o tipo fator com faixa etária
View(dados_clientes$Idade)
summary(dados_clientes$Idade)
hist(dados_clientes$Idade)
?cut
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100),
labels = c("Jovem",
"Adulto",
"Idoso"))
View(dados_clientes$Idade)
str(dados_clientes$Idade)
summary(dados_clientes)
#Convertendo a variável que indica pagamentos para o tipo fator
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
str(dados_clientes$Estado_Civil)
summary(dados_clientes)
str(dados_clientes)
sapply(dados_clientes, function(x) sum(is.na(x)))
dados_clientes <- na.omit(dados_clientes)
missmap(dados_clientes, main = "Valores Missing Observados")
dim(dados_clientes)
View(dados_clientes)
str(dados_clientes$inadimplente)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
str(dados_clientes$inadimplente)
table(dados_clientes$inadimplente)
prop.table(table(dados_clientes$inadimplente))
qplot(inadimplente, data = dados_clientes, geom = "bar") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
createDataPartition
?createDataPartition
set.seed(12345)
indice <- createDataPartition(dados_clientes$inadimplente,
p = 0.75,
list = FALSE)
dim(indice)
dados_treino <- dados_clientes[indice,]
dim(dados_treino)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
str(dados_clientes$inadimplente)
View(dados_clientes)
table(dados_treino$inadimplente)
prop.table(table(dados_clientes$inadimplente))
dim(dados_treino)
compara_dados <- cbind(prop.table(table(dados_treino$inadimplente)),
prop.table(table(dados_clientes$inadimplente)))
colnames(compara_dados) <- c("Treinamento", "Original")
compara_dados
melt_compara_dados <- melt(compara_dados)
melt_compara_dados
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar(aes(fill = x2), stat = identuty, position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar(aes(fill = x2), stat = identity, position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar(aes(fill = x2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
melt_compara_dados
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar(aes(fill = x2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar(aes(fill = x), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar(aes(fill = x2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar( aes(fill = x2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = x1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot para ver a distribuição do treinamento vs original
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dados_teste <- dados_clientes[-indice,]
dim(dados_teste)
dim_dados_treino
dim(dados_teste)
dim(dados_treino)
modelo_v1 <- randomForest(inadimplente ~ ., data = dados_treino)
modelo_v1
previsoes_v1 <- predict(modelo_v1, dados_teste)
cm_v1 <- caret::confusionMatrix(previsoes_v1, dados_teste?inadimplente, positive = "1")
cm_v1 <- caret::confusionMatrix(previsoes_v1, dados_teste$inadimplente, positive = "1")
dim(dados_treino)
cm_v1
y <- dados_teste$inadimplente
y_pred_v1 <- previsoes_v1
precision <- posPredValue(y_pred_v1, y)
precision
recall <- sensitivity(y_pred_v1, y)
recall
F1 <- ( 2 * precision * recall) / (precision + recall)
F1
install.packages("DMwR")
libray(DMwR)
library(DMwR)
dados_treino_bal <- SMOTE(inadimplente ~ . , data = dados_treino)
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino$inadimplente))
install.packages("DMwR")
library(DMwR)
install.packages("DMwR")
install.packages("DMwR")
install.packages("smotefamily")
library(smotefamily)
table(dados_treino$inadimplente)
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ . , data = dados_treino)
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino$inadimplente))
table(dados_treino$inadimplente)
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ . , data = dados_treino)
